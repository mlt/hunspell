skip_tags: true
image: Visual Studio 2017
shallow_clone: true
clone_depth: 1
environment:
  matrix:
#  - MSYSTEM: MINGW64
#    BASH_PATH: C:\msys64\usr\bin\bash
#    build: mingw64
#  - BASH_PATH: c:\cygwin\bin\bash
#  - configuration: Debug
  - configuration: Release
    platform: x64
    build: msvc-%configuration%-%platform%

build_script:
- appveyor AddMessage Building -Category Information
- ps: |
    if ($env:BASH_PATH) {
      & cmd /c '%BASH_PATH% -lc "cd $APPVEYOR_BUILD_FOLDER; autoreconf -i && ./configure && make" 2>&1'
    } else {
      cd msvc
      Copy-Item config.h -destination ..\
      msbuild /p:configuration=$env:configuration /p:platform=$env:platform Hunspell.sln `
        /verbosity:minimal /logger:"C:\Program Files\AppVeyor\BuildAgent\Appveyor.MSBuildLogger.dll"
    }
# /p:PlatformToolset=v140

after_build:
- ps: |
    if ($env:BASH_PATH) {
      Add-AppveyorMessage -Message Installing -Category Information
      & cmd /c '%BASH_PATH% -lc "cd $APPVEYOR_BUILD_FOLDER; make install-strip DESTDIR=/c/inst" 2>&1'
      & cmd /c '%BASH_PATH% -lc "cd /mingw64/bin && cp libgcc_s_seh-1.dll libiconv-2.dll libintl-8.dll libstdc++-6.dll libwinpthread-1.dll /c/inst/mingw64/bin/"'
      Add-AppveyorMessage -Message  Packing -Category Information
      & 7z.exe a -tzip -mx9 -mmt "${env:APPVEYOR_BUILD_FOLDER}\hunspell-${env:build}.zip" "C:\inst\mingw64\*"
    } else {
      cd ${env:APPVEYOR_BUILD_FOLDER}\msvc\${env:platform}\${env:configuration}
      & 7z.exe a -tzip -mx9 -mmt "${env:APPVEYOR_BUILD_FOLDER}\hunspell-${env:build}.zip" *.exe *.pdb *.lib
    }

test_script:
- ps: |
    if ($env:BASH_PATH) {
      Add-AppveyorMessage -Message  Testing -Category Information
      Add-AppveyorTest -Name Regression -Framework catch -FileName stuff -Outcome Running
      $env:Outcome='Passed'
      & $env:BASH_PATH -lc 'cd $APPVEYOR_BUILD_FOLDER; make check 2>&1 || export Outcome=Failed'
      Update-AppveyorTest -Name Regression -Framework catch -FileName stuff -Outcome $env:Outcome -Duration 1
      if ($env:Outcome -ne 'Passed') { Get-Content -Path tests\v1cmdline\test-suite.log }
    }

artifacts:
# - path: hunspell-%build%.zip
- path: hunspell-msvc-Release-x64.zip
  name: binaries
# - path: tests/v1cmdline/test-suite.log

# before_deploy:
# - ps: |
#     if (-Not ($env:BASH_PATH)) {
#       $hunspell_version = & C:\msys64\usr\bin\grep -Po '^#define VERSION ""\K.+(?="")' ${env:APPVEYOR_BUILD_FOLDER}/msvc/config.h
#       ${env:hunspell_version} = $hunspell_version
#       Write-Host "We built version $hunspell_version"
#       $url = $artifacts['binaries'].url
#       Write-Host "Artifacts's URL: $url"
#       cd ${env:APPVEYOR_BUILD_FOLDER}\chocolatey
#       (Get-Content hunspell.portable.nuspec).replace('VERSION', $hunspell_version) |
#         Set-Content hunspell.portable.nuspec
#       (Get-Content tools\chocolateyInstall.ps1).replace('URL', $url) |
#         Set-Content tools\chocolateyInstall.ps1
#       & choco pack
#       Push-AppveyorArtifact *.nupkg
#     }

after_deploy:
- ps: |
    if (-Not ($env:BASH_PATH)) {
      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
      $headers = @{'Accept' = 'application/vnd.github.v3+json'}
      # $uri = "https://api.github.com/repos/${env:APPVEYOR_REPO_NAME}/releases/latest"
      $uri = "https://api.github.com/repos/${env:APPVEYOR_REPO_NAME}/releases/tags/appveyor_v${env:hunspell_version}"
      $result = Invoke-RestMethod -Uri $uri -Headers $headers
      $url = $result.assets[0].browser_download_url
      Write-Host "Github releases download url: $url"
      $hunspell_version = & C:\msys64\usr\bin\grep -Po '^#define VERSION ""\K.+(?="")' ${env:APPVEYOR_BUILD_FOLDER}/msvc/config.h
      ${env:hunspell_version} = $hunspell_version
      Write-Host "We built version $hunspell_version"
      cd ${env:APPVEYOR_BUILD_FOLDER}\chocolatey
      (Get-Content hunspell.portable.nuspec).replace('VERSION', $hunspell_version) |
        Set-Content hunspell.portable.nuspec
      (Get-Content tools\chocolateyInstall.ps1).replace('URL', $url) |
        Set-Content tools\chocolateyInstall.ps1
      & choco pack
      # & choco apikey -k ${env:CHOCOLATEY_API_KEY} -s https://push.chocolatey.org/
      # & choco push
    }

deploy:
- provider: GitHub
  release: appveyor_v$(hunspell_version)
  description: 'Automated build from AppVeyor'
  auth_token: $(GITHUB_TOKEN)
  artifact: binaries
#- provider: NuGet
#  server: https://push.chocolatey.org/
#  api_key: $(CHOCOLATEY_API_KEY)
#  skip_symbols: true
#  artifact: /.*\.nupkg/
#  on:
#    appveyor_repo_tag: true
